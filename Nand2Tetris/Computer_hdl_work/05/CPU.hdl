// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Section 1: getting to A
    Mux16(a=instruction, b=out-ALU, sel=instruction[15], out=out-pre-A);
    ARegister(in=out-pre-A, load=write-A, out=out-A, out[0..14]=addressM);
        // constructing write-A. Write to A if ins[5] == 1 or ci == 0 (not-ci == 1)
    Not(in=instruction[15], out=not-ci);
    Or(a=not-ci, b=instruction[5], out=write-A);

    // Section 2: ALU, D, M, and the opcode
        //MA mux
    And(a=instruction[15], b=instruction[12], out=MorA-chooser);
    Mux16(a=out-A, b=inM, sel=MorA-chooser, out=out-MA);
        // D-register
    And(a=instruction[15], b=instruction[4], out=D-dst-and-ci);
    DRegister(in=out-ALU, load=D-dst-and-ci, out=out-D);
        // ALU
    ALU(x=out-D, y=out-MA, zx=instruction[11], nx=instruction[10], 
            zy=instruction[9], ny=instruction[8], f=instruction[7], 
            no=instruction[6], out=out-ALU, out=outM, zr=out-zr, ng=out-ng);
        // write to M?
    And(a=instruction[15], b=instruction[3], out=writeM);

    // Section 3: Program Counter and Jump Logic
        // Jump logic (ng, zr, ps) - (2, 1, 0)
    And(a=out-ng, b=instruction[2], out=is-neg);
    And(a=out-zr, b=instruction[1], out=is-zero);
    Or(a=is-neg, b=is-zero, out=is-negORis-zero);
            // positive subsection
    Not(in=ngORzr, out=out-ps);
    And(a=out-ps, b=instruction[0], out=is-pos);
            // OR (neg, zero, pos)
    Or(a=out-ng, b=out-zr, out=ngORzr);
    Or(a=is-negORis-zero, b=is-pos, out=pre-j);
    And(a=instruction[15], b=pre-j, out=j);
        // Program Counter
    Not(in=j, out=not-j);
    PC(in=out-A, load=j, inc=not-j, reset=reset, out[0..14]=pc, out[15]=false);
    

    


}